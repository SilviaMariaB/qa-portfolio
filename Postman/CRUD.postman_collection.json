{
	"info": {
		"_postman_id": "d4b37fe2-a97b-40b1-9d4b-c3823edb7398",
		"name": "CRUD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48559945",
		"_collection_link": "https://bogdansilvia30-8228989.postman.co/workspace/Silvia-Bogdan's-Workspace~78026b93-faae-44b5-8e8a-4e5390b3b78b/collection/48559945-d4b37fe2-a97b-40b1-9d4b-c3823edb7398?action=share&source=collection_link&creator=48559945"
	},
	"item": [
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verifica status code = 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//transforma raspunsul in JSON\r",
							"const body = pm.response.json();\r",
							"\r",
							"//verifica daca raspunsul este un array\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(body).to.be.an('array');\r",
							"});\r",
							"\r",
							"//verifica daca primul user are proprietatile corecte\r",
							"pm.test(\"First user has correct properties\", function () {\r",
							"    pm.expect(body[0]).to.have.property(\"id\");\r",
							"    pm.expect(body[0]).to.have.property(\"first_name\");\r",
							"    pm.expect(body[0]).to.have.property(\"last_name\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/test_api.php?action=fetch_all",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"test_api.php"
					],
					"query": [
						{
							"key": "action",
							"value": "fetch_all"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//verifica status code = 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//transforma raspunsul in JSON\r",
							"const body = pm.response.json();\r",
							"\r",
							"//verifica daca raspunsul este un obiect\r",
							"pm.test(\"Response is an object\", function () { \r",
							"    pm.expect(body).to.be.an('object');\r",
							"});\r",
							"\r",
							"// verifică dacă are toate câmpurile necesare\r",
							"pm.test(\"User object has required fields\", function () {\r",
							"    pm.expect(body).to.have.property(\"first_name\");\r",
							"    pm.expect(body).to.have.property(\"last_name\");\r",
							"});\r",
							"\r",
							"// verifică tipurile valorilor\r",
							"pm.test(\"User fields have correct types\", function () {\r",
							"    pm.expect(body.first_name).to.be.a(\"string\");\r",
							"    pm.expect(body.last_name).to.be.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/test_api.php?action=fetch_single&id=3184",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"test_api.php"
					],
					"query": [
						{
							"key": "action",
							"value": "fetch_single"
						},
						{
							"key": "id",
							"value": "3184"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Insert user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//the endpoint is not 100% RESTful, instead of code 201 we get code 200 for all successful cases\r",
							"pm.test(\"Status code is 201 or 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "first_name",
							"value": "Silvia1",
							"type": "text"
						},
						{
							"key": "last_name",
							"value": "Bogdan1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/test_api.php?action=insert",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"test_api.php"
					],
					"query": [
						{
							"key": "action",
							"value": "insert"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//the endpoint is not 100% RESTful, instead of code 201 we get code 200 for all successful cases\r",
							"pm.test(\"Status code is 201 or 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Update was successful\", function () {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json[0].success).to.eql(\"1\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "3232",
							"type": "text"
						},
						{
							"key": "first_name",
							"value": "M",
							"type": "text"
						},
						{
							"key": "last_name",
							"value": "B",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/test_api.php?action=update",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"test_api.php"
					],
					"query": [
						{
							"key": "action",
							"value": "update"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/test_api.php?action=delete&id=3233",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"test_api.php"
					],
					"query": [
						{
							"key": "action",
							"value": "delete"
						},
						{
							"key": "id",
							"value": "3233"
						}
					]
				}
			},
			"response": []
		}
	]
}